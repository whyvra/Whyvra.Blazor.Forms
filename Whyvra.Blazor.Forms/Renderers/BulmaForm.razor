@typeparam T
@inherits FormRenderer<T>

<form>
    @foreach (var elem in FormModel.Elements.Where(x => x is InputElement input && !input.IsHidden).Select(x => (InputElement) x))
    {
        <div class="field">
            @if (elem is TextAreaElement textArea)
            {
                <label for="@(textArea.Name)">@(textArea.DisplayName)</label>
                <div class="control">
                    <textarea id="@(textArea.Name)" class="textarea has-fixed-size @(FormState == FormState.ReadOnly ? "is-static" : "")"
                        placeholder="@(textArea.Placeholder)" value="@(textArea.Get(FormModel.DataModel) ?? string.Empty)"
                        cols="@(textArea.Columns)" rows="@(textArea.Rows)"
                        readonly="@(FormState == FormState.ReadOnly)"
                        @onchange="@(e => HandleInput(textArea, e))"
                        @onfocusout="@(() => ValidateElement(textArea))">
                    </textarea>
                    <ValidationMessage Messages="@textArea.ValidationMessages" />
                </div>
            }
            else if (elem is TagsInputElement tagsInput)
            {
                <label for="@(tagsInput.Name)">@(tagsInput.DisplayName)</label>
                <div class="control" @onfocusout="@(() => ValidateElement(tagsInput))">
                    <BulmaTagsInput
                        Data="@(tagsInput.Get(FormModel.DataModel) as IEnumerable<string>)"
                        EmptyValue="@tagsInput.EmptyValue"
                        IsReadOnly="@(FormState == FormState.ReadOnly)"
                        Placeholder="@(tagsInput.Placeholder)"
                        DataChanged="@((tags) => tagsInput.Set(FormModel.DataModel, tags))" />
                    <ValidationMessage Messages="@tagsInput.ValidationMessages" />
                </div>
            }
            else if (elem is CheckboxElement checkbox)
            {
                <div class="control">
                    <label>
                        <input type="checkbox" class="checkbox" checked="@checkbox.Get(FormModel.DataModel)"
                            @onchange="@(e => HandleCheckbox(checkbox, e))" >
                        @checkbox.DisplayName 
                    </label>
                </div>
            }
            else if (elem is ListElement list)
            {
                <label>@list.DisplayName</label>
                <div class="control">
                    <ListPicker ListElement="@list" DefaultValue="@list.Get(FormModel.DataModel)" OnChanged="@((id) => list.Set(FormModel.DataModel, id))"></ListPicker>
                    <ValidationMessage Messages="@list.ValidationMessages" />
                </div>
            }
            else
            {
                <label for="@(elem.Name)">@elem.DisplayName</label>
                <p class="control @(elem.Icon != null ? "has-icons-left" : "")">
                    <input type="@(elem.Type)" id="@(elem.Name)" class="input @(FormState == FormState.ReadOnly ? "is-static" : "")"
                        placeholder="@(elem.Placeholder)" value="@(elem.Get(FormModel.DataModel))" 
                        readonly="@(FormState == FormState.ReadOnly)"
                        @onchange="@(e => HandleInput(elem, e))"
                        @onfocusout="@(() => ValidateElement(elem))" />
                    @if (elem.Icon != null)
                    {
                        <span class="icon is-left @elem.Icon.Size">
                            <i class="@(elem.Icon.Name)"></i>
                        </span>
                    }
                    <ValidationMessage Messages="@elem.ValidationMessages" />
                </p>
            }
        </div>
    }
</form>